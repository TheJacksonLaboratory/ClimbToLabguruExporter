#!/usr/env/bin/python

# An interface for querying and updating our custom inventory
# collections in LabGuru

import configparser
import json
import logging
import requests
import os
import sys
import urllib


class LabGuruBioCollections:

    """ Query and update our custom inventory collections in LabGuru """

    def __init__(self):

        """ Parse config file, read tokens. """
        
	    # Load config file, which is in the same directory as the source code.
        self.config = configparser.ConfigParser()
        src_dir = os.path.dirname(os.path.abspath(__file__))
        self.config.read(os.path.join(src_dir, "config.cfg"))
		
        self.request_headers = { 'accept': 'application/json',
            'Content-Type': 'application/json' }
            
        # Get the filename containing the token and read it
        token_filename = self.config["credentials"]["labguru_token_file"]
        try:
            with open(token_filename) as f:
                self.token = f.read().rstrip()
        except Exception as e:
            err_msg = "Cannot read labguru token file " + token_filename
            err_msg += ". Received exception " + str(e)
            sys.exit(err_msg)
        
        # Get shortcuts to the urls for updating sample collections
        self.sample_descriptions = self.config["labguru_sample_descriptions"]
        self.sample_urls = self.config["labguru_api_sample_urls"]
        self.base_url = self.sample_urls["base_url"]
        
        # We need to keep track of what samples are already in Labguru so that we don't add a sample
        # again. Unfortunately, the system has no way to do that, so we query it and make a lookup table.
        # Our table is a dict, where each key is a sample_type, and each value is a set containing the names
        # of all existing samples of that type. 
        self.existing_samples = {}
        self.__load_existing_samples()


    def add_sample(self, sample_type, sample_name):
    
        """
        
        Add a sample into Labguru.

        Parameters:
        
            sample_type (str): The sample's type.
            
            sample_name (str): The samples' name.
            
        Returns:
        
            Bool : True if added, false if not.
        
        """

        if self.__skip_samples(sample_type):
            logging.debug(f"Skipping sample {sample_name} due to skipped type {sample_type}")
            return False
            
        if self.sample_exists(sample_type, sample_name):
            logging.debug(f"Sample {sample_name} of type {sample_type} already exists, skipping.")
            return False
            
        url = self.get_url(sample_type)
        desc = self.get_description(sample_type)
        
        payload = { "token" : self.token,
            "item": {
                "name": sample_name,
                "description": desc
            }
        }
        logging.debug(f"Attempting to add sample {sample_name} of type {sample_type}...")
        response = requests.request("POST", url, headers=self.request_headers,
            json = payload).text.encode('utf-8').decode("utf-8")
        
        # A successful request should return a json dict. Confirm it contains a valid auto_name
        # generated by LabGuru for the new sample.
        try:
            auto_name = json.loads(response)["auto_name"]
            logging.info(f"Successfully added sample {sample_name} of type {sample_type}.")
        except Exception:
            logging.error(f"Could not add sample {sample_name} of type {sample_type}. Response: {response}")

        
    def get_description(self, sample_type):
    
        """ Get the description to be added to the sample. """
            
        if self.__skip_samples(sample_type):
            logging.debug(f"Skipping sample of type {sample_type}.")
            return None
           
        short_type = self.__get_short_type(sample_type)
        desc = self.sample_descriptions[short_type]
        # There some special cases. This handling is a hack but will suffice.
        if short_type == "Kidney":
            if "Left" in sample_type:
                desc = "Left Kidney"
            elif "Right" in sample_type:
                desc = "Right Kidney"
            else:
                logging.error(f"Cannot get description for Kidney sample {sample_type}")
        return desc


    def get_url(self, sample_type):
    
        """ Get the custom collection URL for adding samples of the given type. """
        
        # Determine whether we should skip this kind of sample
        if self.__skip_samples(sample_type):
            logging.debug(f"Skipping sample of type {sample_type}.")
            return None
        url = None
        short_type = self.__get_short_type(sample_type)
        try:
            url = self.base_url + self.sample_urls[short_type]
        except KeyError:
            logging.error(f"Sample type {sample_type} not found in sample collections")
        
        # Change spaces to '%20'
        url = url.replace(' ', '%20')
        return url
	
    def sample_exists(self, sample_type, sample_name):
    
        """ Find whether this sample already exists in LabGuru. """

        # All existing samples were indexed by their short_type.
        short_type = self.__get_short_type(sample_type)
        val = sample_name in self.existing_samples[short_type]
        return val

    def __get_short_type(self, sample_type):
    
        """ Get the lowercase first word from the sample with no hyphens."""
        
        short_type = sample_type.replace('-', ' ').split(' ')[0].lower()
        return short_type
        
    def __load_existing_samples(self):
    
        """ Find and store the names of all samples already in Labguru. """
        
        payload = { "token" : self.token}
        
        # For each kind of sample, get a list of existing samples.
        for short_type, url in self.sample_urls.items():
            if short_type == "base_url":
                continue
            full_url = (self.base_url + url).replace(' ', '%20')
 
            response = requests.request("GET", full_url, headers=self.request_headers,
                json=payload).text.encode('utf-8').decode("utf-8")
            samples = json.loads(response)
            # Put the names of all samples in a set.
            sample_names = set()
            for sample in samples:
                if type(sample) is dict:
                    sample_names.add(sample["name"])
                else:
                    logging.error(f"For {short_type}, found non-dict sample {sample}.")
                
            logging.info(f"For sample_type {short_type}, found samples: {sample_names}")
            self.existing_samples[short_type] = sample_names
        
        
    def __skip_samples(self, sample_type):
    
        """ Determine whether given sample type should be skipped. """
        
        return sample_type in self.config["skip_samples"]
    
    
    
if __name__ == "__main__":
    lgbc = LabGuruBioCollections()
	
		
